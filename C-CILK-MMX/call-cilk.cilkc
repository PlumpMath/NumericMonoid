#include<stdlib.h>
#include<stdio.h>
#include<cilk.h>

#include"call-cilk.h"

extern void EXPORT(walk_children)(CilkContext *context, monoid *pm);
extern result *results_proc_local;
extern monoid **stacks_proc_local;
extern void print_sizes();
extern int nproc;

long int call_cilk(monoid *pm)
{
  int i;
  char * argv[] = {"bla", "-nproc", "8", 0};
  int argc = 3, Cilk_active_size=8, proc;
  long int res;
  CilkContext *context;

  nproc = 8;
  // Init the various stacks
  stacks_proc_local = malloc(Cilk_active_size*sizeof(result));
  for (proc=0; proc<Cilk_active_size; proc++)
    stacks_proc_local[proc] = malloc(100*sizeof(monoid));
  // Init the proc local results
  results_proc_local = malloc(Cilk_active_size*sizeof(result));
  for (proc=0; proc<Cilk_active_size; proc++)
    for (i=0; i<MAX_GENUS; i++) results_proc_local[proc][i] = 0;

  results_proc_local[0][0] = 1;

  printf("Lanching Cilk system\n");
  context = Cilk_init(&argc, argv);
  printf("Starting computations\n");
  EXPORT(walk_children)(context, pm);
  printf("\n============================\n\n");
  print_sizes();
  res = 0;
  for (proc=0; proc<nproc; proc++)
    res += results_proc_local[proc][MAX_GENUS-1];
  free(results_proc_local);
  return res;
}

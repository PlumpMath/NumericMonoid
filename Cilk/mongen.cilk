// Compilation:
//    gcc -O3 -Wall -ggdb mgen.c -c && gcc mgen.o -o mgen
// Visualisation:
//    objdump -dS mgen.o

#include <assert.h>
#include <stdio.h>
#include <tmmintrin.h>
#include <cilk-lib.cilkh>

typedef char epi8 __attribute__ ((vector_size (16)));
epi8 zero, block2, shift16[16];

#define nth_block(st, i) (((epi8 *) st)[i])
#define load_epi8(t) ((epi8) _mm_loadu_si128((__m128i *) (t)))
#define store_epi8(t, v) (_mm_store_si128((__m128i *) (t), (__m128i) (v)))
#define storeu_epi8(t, v) (_mm_storeu_si128((__m128i *) (t), (__m128i) (v)))

#define MAX_GENUS 37
#define SIZE_BOUND (3*MAX_GENUS-1)
#define NBLOCKS ((SIZE_BOUND+15) >> 4)
#define SIZE (NBLOCKS << 4)


typedef unsigned char nb_decompositions[SIZE] __attribute__ ((aligned (16)));
typedef struct {
  nb_decompositions decs;
  unsigned char conductor, min, genus;
} monoid;

typedef unsigned long long int result[MAX_GENUS+1];

result numbers, *numbers_proc_local;

void print_monoid(monoid *pm)
{
  unsigned int i;
  printf("min = %i, cond = %i, genus = %i, decs = ",
	 pm->min, pm->conductor, pm->genus);
  for (i=0; i<SIZE; i++) printf("%u ", pm->decs[i]);
  printf("\n");
}

void print_epi8(epi8 bl)
{
  unsigned int i;
  for (i=0; i<16; i++) printf("%u ", ((char*)&bl)[i]);
  printf("\n");
}

void remove_generator(monoid *src, monoid *dst, unsigned char gen)
{
  unsigned char start_block, decal, i;
  epi8 block;

  assert(src->decs[gen] == 2);

  dst->conductor = gen + 1;
  dst->genus = src->genus + 1;
  if (gen == src->min) dst->min = dst->conductor;
  else                 dst->min = src->min;

  for (i=0; i<NBLOCKS; i++)
    nth_block(dst->decs, i) = nth_block(src->decs, i);

  start_block = gen >> 4;
  decal = gen - (gen & 0xFFF0);
  // block = zero;
  // for (i=decal; i<16; i++) ((char *)&block)[i] = ((char *)&src->decs)[i-decal];
  block = (epi8) _mm_shuffle_epi8((__m128i) nth_block(src->decs, 0),
				  (__m128i) shift16[decal]);
  nth_block(dst->decs, start_block) -= ((block != zero) & block2);

  for (i=start_block+1; i<NBLOCKS; i++)
    {
      // The following won't work due to a bug in GCC 4.7.1
      // block = *((epi8*)(src->decs + ((i-start_block)<<4) - decal));
      block = load_epi8(src->decs + ((i-start_block)<<4) - decal);
      nth_block(dst->decs, i) -= ((block != zero) & block2);
    }
  if (2*gen<SIZE) dst->decs[2*gen]++;

  assert(dst->decs[dst->conductor-1] == 0);
}


cilk void walk_children(monoid *pm)
{
  unsigned int i;
  monoid tmpmon, *newmonoid = &tmpmon;

  numbers_proc_local[Self][pm->genus]++;

  if (pm->genus < MAX_GENUS)
    for (i = pm->conductor; i <= pm->conductor+pm->min; i++)
      if (pm->decs[i] == 2)
	{
	  if (!SYNCHED) // Another thread is still working on the former newmonoid
	    newmonoid = (monoid *) Cilk_alloca(sizeof(monoid));
	  remove_generator(pm, newmonoid, i);
	  spawn walk_children(newmonoid);
	}
}


cilk int main(void)
{
  unsigned int i, j;
  int proc;
  epi8 block;
  monoid N, N1;

  numbers_proc_local = (result *) malloc(Cilk_active_size*sizeof(result));

  for (proc=0; proc<Cilk_active_size; proc++)
    for (j=0; j<=MAX_GENUS; j++) numbers_proc_local[proc][j] = 0;

  for (i=0; i<16; i++) ((char *)&shift16[0])[i] = -1;
  for (i=1; i<16; i++) shift16[i] = shift16[0];
  for (i=0; i<16; i++) for (j=i; j<16; j++) ((char *)&shift16[i])[j] = j-i;

  for (i=0; i<16; i++) ((char *)&zero)[i] = 0;
  for (i=0; i<16; i++) ((char *)&block2)[i] = 2;
  for (i=0; i<16; i++) ((char *)&block)[i] = i+1;
  for (i=0; i<NBLOCKS; i++) nth_block(N.decs, i) = block + ((char) (i<<4));
  N.genus = 0;
  N.conductor = 1;
  N.min = 1;
  remove_generator(&N, &N1, 1);

  spawn walk_children(&N1);
  sync;

  // Gather results
  for (j=0; j<=MAX_GENUS; j++)
    {
      unsigned long long int res = 0;
      for (proc=0; proc<Cilk_active_size; proc++) res += numbers_proc_local[proc][j];
      numbers[j] = res;
    }
  free(numbers_proc_local);

  printf("Size = ");
  for (i=1; i<=MAX_GENUS; i++) printf("%llu ", numbers[i]);
  printf("\n");
  return EXIT_SUCCESS;
}

/*

  popcorn-~/src/c/MMX/Cilk $ time ./mongen --nproc 8
Size = 1 2 4 7 12 23 39 67 118 204 343 592 1001 1693 2857 4806 8045 13467 22464 37396 62194 103246 170963 282828 467224 770832 1270267 2091030 3437839 5646773 9266788 15195070 24896206 40761087 66687201 109032500 178158289 290939807 474851445 774614284 
./mongen --nproc 8  426.06s user 0.02s system 796% cpu 53.483 total

popcorn-~/src/c/MMX/Cilk $ time ./mongen --nproc 1
Size = 1 2 4 7 12 23 39 67 118 204 343 592 1001 1693 2857 4806 8045 13467 22464 37396 62194 103246 170963 282828 467224 770832 1270267 2091030 3437839 5646773 9266788 15195070 24896206 40761087 66687201 109032500 178158289 290939807 474851445 774614284 
./mongen --nproc 1  279.29s user 0.00s system 99% cpu 4:39.93 total

popcorn-~/src/c/MMX $ time ./mgen                                        
Size = 1 2 4 7 12 23 39 67 118 204 343 592 1001 1693 2857 4806 8045 13467 22464 37396 62194 103246 170963 282828 467224 770832 1270267 2091030 3437839 5646773 9266788 15195070 24896206 40761087 66687201 109032500 178158289 290939807 474851445 774614284 
./mgen  228.31s user 0.03s system 99% cpu 3:48.84 total

*/
